{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Make it correct, make it clear, make it concise, make it fast. In that order. Personal tech notes. www.filipelucas.com","title":"Home"},{"location":"database-conventions.html","text":"database conventions table names: singular and lower case","title":"database conventions"},{"location":"database-conventions.html#database-conventions","text":"table names: singular and lower case","title":"database conventions"},{"location":"standards-and-conventions.html","text":"standards and conventions database table names and columns names in snake_case","title":"standards and conventions"},{"location":"standards-and-conventions.html#standards-and-conventions","text":"database table names and columns names in snake_case","title":"standards and conventions"},{"location":"cloud/aws.html","text":"AWS configure profile: aws configure --profile <profile_name> services s3 turn objects public: { \"Version\": \"2008-10-17\", \"Id\": \"...\", \"Statement\": [ { \"Sid\": \"...\", \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"*\" }, \"Action\": \"s3:GetObject\", \"Resource\": \"arn:aws:s3:::olx-ads/*\" } ] } CLI s3 copy local folders to s3 bucket. aws s3 cp ./<path> s3://<bucket-name> --recursive cloudfront invalidate cache: aws cloudfront create-invalidation --distribution-id <distribution-id> --paths '<path_to_invalidate>'","title":"AWS"},{"location":"cloud/aws.html#aws","text":"configure profile: aws configure --profile <profile_name>","title":"AWS"},{"location":"cloud/aws.html#services","text":"","title":"services"},{"location":"cloud/aws.html#s3","text":"turn objects public: { \"Version\": \"2008-10-17\", \"Id\": \"...\", \"Statement\": [ { \"Sid\": \"...\", \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"*\" }, \"Action\": \"s3:GetObject\", \"Resource\": \"arn:aws:s3:::olx-ads/*\" } ] }","title":"s3"},{"location":"cloud/aws.html#cli","text":"","title":"CLI"},{"location":"cloud/aws.html#s3_1","text":"copy local folders to s3 bucket. aws s3 cp ./<path> s3://<bucket-name> --recursive","title":"s3"},{"location":"cloud/aws.html#cloudfront","text":"invalidate cache: aws cloudfront create-invalidation --distribution-id <distribution-id> --paths '<path_to_invalidate>'","title":"cloudfront"},{"location":"cloud/terraform.html","text":"terraform import resource: terraform import aws_s3_bucket.my-bucket bucket-created-manually","title":"terraform"},{"location":"cloud/terraform.html#terraform","text":"import resource: terraform import aws_s3_bucket.my-bucket bucket-created-manually","title":"terraform"},{"location":"common-tools-and-programs/git.html","text":"git List existing remotes: git remote -v Show remote url: git remote show <remote_name> Change remote url: git remote set-url <remote_name> <url> Delete local branch: git branch -d <branch_name Delete remote branch: git push <remote> -d <branch_name> Check file log: git log -p <filename> Revert changes to file: git reset <commit hash> <filename> Get logs since: git log --since=\"2017-02-12T16:36:00-07:00\" Get oldest commits: git log --reverse git blame: git blame -L 1,5 README.md remove file from repository git rm --cached <file_name> ammend last commit message: git commit --amend -m\"<new commit message>\"","title":"git"},{"location":"common-tools-and-programs/git.html#git","text":"List existing remotes: git remote -v Show remote url: git remote show <remote_name> Change remote url: git remote set-url <remote_name> <url> Delete local branch: git branch -d <branch_name Delete remote branch: git push <remote> -d <branch_name> Check file log: git log -p <filename> Revert changes to file: git reset <commit hash> <filename> Get logs since: git log --since=\"2017-02-12T16:36:00-07:00\" Get oldest commits: git log --reverse git blame: git blame -L 1,5 README.md remove file from repository git rm --cached <file_name> ammend last commit message: git commit --amend -m\"<new commit message>\"","title":"git"},{"location":"common-tools-and-programs/nginx.html","text":"nginx config for dokuwiki server { listen 80; listen [::]:80; server_name wiki.domain.example; return 301 https://$server_name$request_uri; } server { listen [::]:443 ssl; listen 443 ssl; server_name wiki.domain.example; # Maximum file upload size is 4MB - change accordingly if needed client_max_body_size 4M; client_body_buffer_size 128k; root /dokuwiki; index doku.php; #Remember to comment the below out when you're installing, and uncomment it when done. location ~ /(conf/|bin/|inc/|install.php) { deny all; } #Support for X-Accel-Redirect location ~ ^/data/ { internal ; } location ~ ^/lib.*\\.(js|css|gif|png|ico|jpg|jpeg)$ { expires 365d; } location / { try_files $uri $uri/ @dokuwiki; } location @dokuwiki { # rewrites \"doku.php/\" out of the URLs if you set the userwrite setting to .htaccess in dokuwiki config page rewrite ^/_media/(.*) /lib/exe/fetch.php?media=$1 last; rewrite ^/_detail/(.*) /lib/exe/detail.php?media=$1 last; rewrite ^/_export/([^/]+)/(.*) /doku.php?do=export_$1&id=$2 last; rewrite ^/(.*) /doku.php?id=$1&$args last; } location ~ \\.php$ { try_files $uri $uri/ /doku.php; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param REDIRECT_STATUS 200; fastcgi_pass unix:/var/run/php/php7.0-fpm.sock; # fastcgi_pass unix:/var/run/php5-fpm.sock; #old php version } }","title":"nginx"},{"location":"common-tools-and-programs/nginx.html#nginx","text":"","title":"nginx"},{"location":"common-tools-and-programs/nginx.html#config-for-dokuwiki","text":"server { listen 80; listen [::]:80; server_name wiki.domain.example; return 301 https://$server_name$request_uri; } server { listen [::]:443 ssl; listen 443 ssl; server_name wiki.domain.example; # Maximum file upload size is 4MB - change accordingly if needed client_max_body_size 4M; client_body_buffer_size 128k; root /dokuwiki; index doku.php; #Remember to comment the below out when you're installing, and uncomment it when done. location ~ /(conf/|bin/|inc/|install.php) { deny all; } #Support for X-Accel-Redirect location ~ ^/data/ { internal ; } location ~ ^/lib.*\\.(js|css|gif|png|ico|jpg|jpeg)$ { expires 365d; } location / { try_files $uri $uri/ @dokuwiki; } location @dokuwiki { # rewrites \"doku.php/\" out of the URLs if you set the userwrite setting to .htaccess in dokuwiki config page rewrite ^/_media/(.*) /lib/exe/fetch.php?media=$1 last; rewrite ^/_detail/(.*) /lib/exe/detail.php?media=$1 last; rewrite ^/_export/([^/]+)/(.*) /doku.php?do=export_$1&id=$2 last; rewrite ^/(.*) /doku.php?id=$1&$args last; } location ~ \\.php$ { try_files $uri $uri/ /doku.php; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param REDIRECT_STATUS 200; fastcgi_pass unix:/var/run/php/php7.0-fpm.sock; # fastcgi_pass unix:/var/run/php5-fpm.sock; #old php version } }","title":"config for dokuwiki"},{"location":"common-tools-and-programs/openssl.html","text":"OpenSSL extract public key: openssl rsa -in <key.pem> -pubout > <public.pem> extract private key: openssl pkey -inform PEM -outform PEM -in <key.pem> -out <private.pem> encrypt with public key: openssl rsautl -encrypt -inkey <key> -pubin -in <file.txt> -out <file.ssl> decrypt with private key: openssl rsautl -decrypt -inkey <private.pem> -in <encrypted.ssl> -out <decrypted.txt> generate key pair: openssl genrsa -out <key.pem> 2048 sign: openssl dgst --sha256 -sign <key.pem> -out <sign.sha256> <file.txt> verify signature: openssl dgst --sha256 -verify <public.pem> -signature <sign-sha256> <file.txt> extract public key from certificate: openssl x509 -in <cert.ctr> -pubkey -noout > <public.pem> convert binary signature to base64: openssl enc -base64 -in <sign-sha256> -out <sign-sha256.base64> encrypt with password: openssl enc -aes-256-cbc -in <text.txt> -out <encrypted> -k <pass.txt> decrypt with password: openssl enc -d aes-256-cbc -in <encrypted> -out <decrypted.txt> -k <pass.txt>","title":"OpenSSL"},{"location":"common-tools-and-programs/openssl.html#openssl","text":"extract public key: openssl rsa -in <key.pem> -pubout > <public.pem> extract private key: openssl pkey -inform PEM -outform PEM -in <key.pem> -out <private.pem> encrypt with public key: openssl rsautl -encrypt -inkey <key> -pubin -in <file.txt> -out <file.ssl> decrypt with private key: openssl rsautl -decrypt -inkey <private.pem> -in <encrypted.ssl> -out <decrypted.txt> generate key pair: openssl genrsa -out <key.pem> 2048 sign: openssl dgst --sha256 -sign <key.pem> -out <sign.sha256> <file.txt> verify signature: openssl dgst --sha256 -verify <public.pem> -signature <sign-sha256> <file.txt> extract public key from certificate: openssl x509 -in <cert.ctr> -pubkey -noout > <public.pem> convert binary signature to base64: openssl enc -base64 -in <sign-sha256> -out <sign-sha256.base64> encrypt with password: openssl enc -aes-256-cbc -in <text.txt> -out <encrypted> -k <pass.txt> decrypt with password: openssl enc -d aes-256-cbc -in <encrypted> -out <decrypted.txt> -k <pass.txt>","title":"OpenSSL"},{"location":"common-tools-and-programs/plant-uml.html","text":"plant uml generate png file: java -jar plantuml.jar file.pu","title":"plant uml"},{"location":"common-tools-and-programs/plant-uml.html#plant-uml","text":"generate png file: java -jar plantuml.jar file.pu","title":"plant uml"},{"location":"common-tools-and-programs/youtube-dl.html","text":"youtube-dl download mp3 format: youtube-dl -x --audio-format mp3 <url>","title":"youtube-dl"},{"location":"common-tools-and-programs/youtube-dl.html#youtube-dl","text":"download mp3 format: youtube-dl -x --audio-format mp3 <url>","title":"youtube-dl"},{"location":"databases/mysql.html","text":"mysql list databases show databases list users select user from mysql.user create user CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password'; create database CREATE DATABASE database_name; grant all privileges GRANT ALL PRIVILEGES ON database_name.* TO 'username'@'localhost' with grant option; flush privileges flush privileges use password to authenticate ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password'; show grants show grants for 'arctel_prod'@'localhost'; solution to collation error: ALTER TABLE parameters_values CONVERT TO CHARACTER SET utf8 COLLATE utf8_unicode_ci; backup database mysqldump <database> > dump.sql","title":"mysql"},{"location":"databases/mysql.html#mysql","text":"","title":"mysql"},{"location":"databases/mysql.html#list-databases","text":"show databases","title":"list databases"},{"location":"databases/mysql.html#list-users","text":"select user from mysql.user","title":"list users"},{"location":"databases/mysql.html#create-user","text":"CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password';","title":"create user"},{"location":"databases/mysql.html#create-database","text":"CREATE DATABASE database_name;","title":"create database"},{"location":"databases/mysql.html#grant-all-privileges","text":"GRANT ALL PRIVILEGES ON database_name.* TO 'username'@'localhost' with grant option;","title":"grant all privileges"},{"location":"databases/mysql.html#flush-privileges","text":"flush privileges","title":"flush privileges"},{"location":"databases/mysql.html#use-password-to-authenticate","text":"ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';","title":"use password to authenticate"},{"location":"databases/mysql.html#show-grants","text":"show grants for 'arctel_prod'@'localhost';","title":"show grants"},{"location":"databases/mysql.html#solution-to-collation-error","text":"ALTER TABLE parameters_values CONVERT TO CHARACTER SET utf8 COLLATE utf8_unicode_ci;","title":"solution to collation error:"},{"location":"databases/mysql.html#backup-database","text":"mysqldump <database> > dump.sql","title":"backup database"},{"location":"databases/postgres.html","text":"Postgres connect to database: psql -d <database_name> -h <host> -U <user> start postgres server: sudo systemctl start postgres Enter posgres prompt: sudo -u postgres psql List users: \\du Create user: create user newuser with password 'password'; Change user password: alter user username with password 'new_password'; Create database: create database database_name; Grant all privileges: grant all privileges on database database_name to user; Check where is hba file: show hba_file; Connect to database: \\c List tables: \\dt Import SQL file: psql databasename < data_base_dump export database: pg_dump -U username dbname > dbexport.pgsql Postgres docker Backup Database generate sql: docker exec -t your-db-container pg_dumpall -c -U your-db-user > dump_$(date +%Y-%m-%d_%H_%M_%S).sql to reduce the size of the sql you can generate a compress: docker exec -t your-db-container pg_dumpall -c -U your-db-user | gzip > ./dump_$(date +``%Y-%m-%d_%H_%M_%S'').gz Restore Database cat your_dump.sql | docker exec -i your-db-container psql -U your-db-user -d your-db-name restore a compressed sql: gunzip your_dump.sql.gz | docker exec -i your-db-container psql -U your-db-user -d y`ur-db-name","title":"Postgres"},{"location":"databases/postgres.html#postgres","text":"connect to database: psql -d <database_name> -h <host> -U <user> start postgres server: sudo systemctl start postgres Enter posgres prompt: sudo -u postgres psql List users: \\du Create user: create user newuser with password 'password'; Change user password: alter user username with password 'new_password'; Create database: create database database_name; Grant all privileges: grant all privileges on database database_name to user; Check where is hba file: show hba_file; Connect to database: \\c List tables: \\dt Import SQL file: psql databasename < data_base_dump export database: pg_dump -U username dbname > dbexport.pgsql","title":"Postgres"},{"location":"databases/postgres.html#postgres-docker","text":"","title":"Postgres docker"},{"location":"databases/postgres.html#backup-database","text":"generate sql: docker exec -t your-db-container pg_dumpall -c -U your-db-user > dump_$(date +%Y-%m-%d_%H_%M_%S).sql to reduce the size of the sql you can generate a compress: docker exec -t your-db-container pg_dumpall -c -U your-db-user | gzip > ./dump_$(date +``%Y-%m-%d_%H_%M_%S'').gz","title":"Backup Database"},{"location":"databases/postgres.html#restore-database","text":"cat your_dump.sql | docker exec -i your-db-container psql -U your-db-user -d your-db-name restore a compressed sql: gunzip your_dump.sql.gz | docker exec -i your-db-container psql -U your-db-user -d y`ur-db-name","title":"Restore Database"},{"location":"databases/sql.html","text":"sql create table: CREATE TABLE table_name ( id bigint not null primary key, value varchar(255) not null, ); insert: INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); update: UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;","title":"sql"},{"location":"databases/sql.html#sql","text":"create table: CREATE TABLE table_name ( id bigint not null primary key, value varchar(255) not null, ); insert: INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); update: UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;","title":"sql"},{"location":"databases/solr/queries.html","text":"solr queries show score: fl=*, score","title":"solr queries"},{"location":"databases/solr/queries.html#solr-queries","text":"show score: fl=*, score","title":"solr queries"},{"location":"databases/solr/solr.html","text":"Solr create fields in schema: curl -X POST -H 'Content-type:application/json' --data-binary '{\"add-field\": {\"name\":\"name\", \"type\":\"text_general\", \"multiValued\":false, \"stored\":true}}' http://localhost:8983/solr/<solr_core>/schema add copy field: curl -X POST -H 'Content-type:application/json' --data-binary '{\"add-copy-field\" : {\"source\":\"*\",\"dest\":\"text\"}}' http://localhost:8983/solr/films/schema delete all xml: <delete><query>*:*</query></delete> solr directories: <solr-home-directory>/ solr.xml core_name1/ core.properties conf/ solrconfig.xml managed-schema data/ core_name2/ core.properties conf/ solrconfig.xml managed-schema data/ schema.xml structure: <schema> <types> <fields> <uniqueKey> <copyField> </schema> facet example: http://127.0.0.1:8983/solr/collection-name/select?facet.field=<field_name>&facet=on&q=*:*","title":"Solr"},{"location":"databases/solr/solr.html#solr","text":"create fields in schema: curl -X POST -H 'Content-type:application/json' --data-binary '{\"add-field\": {\"name\":\"name\", \"type\":\"text_general\", \"multiValued\":false, \"stored\":true}}' http://localhost:8983/solr/<solr_core>/schema add copy field: curl -X POST -H 'Content-type:application/json' --data-binary '{\"add-copy-field\" : {\"source\":\"*\",\"dest\":\"text\"}}' http://localhost:8983/solr/films/schema delete all xml: <delete><query>*:*</query></delete> solr directories: <solr-home-directory>/ solr.xml core_name1/ core.properties conf/ solrconfig.xml managed-schema data/ core_name2/ core.properties conf/ solrconfig.xml managed-schema data/ schema.xml structure: <schema> <types> <fields> <uniqueKey> <copyField> </schema> facet example: http://127.0.0.1:8983/solr/collection-name/select?facet.field=<field_name>&facet=on&q=*:*","title":"Solr"},{"location":"databases/solr/user-experience-features.html","text":"User experience features Pagination and sorting Faceting Autosuggest Spell-checker Hit highlighting Geospatial search","title":"User experience features"},{"location":"databases/solr/user-experience-features.html#user-experience-features","text":"Pagination and sorting Faceting Autosuggest Spell-checker Hit highlighting Geospatial search","title":"User experience features"},{"location":"hugo/hugo.html","text":"Hugo Web static generator. Ugly URLs: uglyurls = true","title":"Hugo"},{"location":"hugo/hugo.html#hugo","text":"Web static generator. Ugly URLs: uglyurls = true","title":"Hugo"},{"location":"linux/certbot.html","text":"certbot install: sudo apt install python3-certbot-nginx issue certificate: sudo certbot --nginx -d example.com","title":"certbot"},{"location":"linux/certbot.html#certbot","text":"install: sudo apt install python3-certbot-nginx issue certificate: sudo certbot --nginx -d example.com","title":"certbot"},{"location":"linux/linux.html","text":"linux common commands ls: list file in human readable format: ls -lh ln create link: ln -s <file> <link> grep search word inside folder: grep -rnw '/path/to/somewhere/' -e 'pattern' -r recursive -n line number -w whole word tar extract file.tar.xz: tar -xf <file.tar.xz> extract file.tar.xz to directry: tar -xf <file.tar.xz> -C /path/to/directory compress files: tar cfzv files.tar.gz file1 file2 file3 \u2026\u200b bc (calculator) define decimal places: scale=2 ssh copy public key to server: ssh-copy-id demo@198.51.100.0 ignore keyprint: ssh -o \"StrictHostKeyChecking=no\" <url> ssh key permissions: chmod 400 ~/.ssh/key.pem connect using ssh keypair: ssh -i key.pem <user>@<hostname> dig check domain ip: dig <url> +short find find files with extension: find . -type f -name \"*.txt\" other commands Certbot with nginx: sudo certbot --standalone certonly -d example.com --pre-hook \"service nginx stop\" --post-hook \"service nginx start\" tips print file strucuture: find . | sed -e \"s/[^-][^\\/]*\\// |/g\" -e \"s/|\\([^ ]\\)/| - \\1/\" check pid using port: lsof -i :8983 check open ports: netstat -plnt solve .pem files bad permission: chmod 400 mykey.pem convert file format with pandoc: pandoc -t <target_format> -f <original_format> <file> turn on case insensitive by adding the following line to /etc/inputrc : set completion-ignore-case on find and replace string: find . -type f ! -path \"./node_modules/{star}\" ! -path \"./.git/{star}\" -exec sed -i \"s/{underscore}{underscore}model/{underscore}model/g\" {} + indentify groff macro: grog -t <file> generate pdf example: groff -man -t <file> | pstopdf -i -o <file.pdf> files/user management to enable sudo for user without asking for password, put at this line the end of file /etc/surdoers : username ALL=(ALL) NOPASSWD:ALL create group: groupadd <new_group> add user to group usermod -a -G <group_name> <username> list groups: cat /etc/group file persmission: # u for user, g for group, o for others # r for read, w for write, x for execute chmod ugo+rwx <foldername> toubleshooting socat permission: setcap 'cap_net_bind_service=+ep' /usr/bin/socat cronjobs check log: grep CRON /var/log/syslog misc http benchmark: ab -c 100 -n 10000 http://127.0.0.1:8080/api/","title":"linux"},{"location":"linux/linux.html#linux","text":"","title":"linux"},{"location":"linux/linux.html#common-commands","text":"","title":"common commands"},{"location":"linux/linux.html#ls","text":"list file in human readable format: ls -lh","title":"ls:"},{"location":"linux/linux.html#ln","text":"create link: ln -s <file> <link>","title":"ln"},{"location":"linux/linux.html#grep","text":"search word inside folder: grep -rnw '/path/to/somewhere/' -e 'pattern' -r recursive -n line number -w whole word","title":"grep"},{"location":"linux/linux.html#tar","text":"extract file.tar.xz: tar -xf <file.tar.xz> extract file.tar.xz to directry: tar -xf <file.tar.xz> -C /path/to/directory compress files: tar cfzv files.tar.gz file1 file2 file3 \u2026\u200b","title":"tar"},{"location":"linux/linux.html#bc-calculator","text":"define decimal places: scale=2","title":"bc (calculator)"},{"location":"linux/linux.html#ssh","text":"copy public key to server: ssh-copy-id demo@198.51.100.0 ignore keyprint: ssh -o \"StrictHostKeyChecking=no\" <url> ssh key permissions: chmod 400 ~/.ssh/key.pem connect using ssh keypair: ssh -i key.pem <user>@<hostname>","title":"ssh"},{"location":"linux/linux.html#dig","text":"check domain ip: dig <url> +short","title":"dig"},{"location":"linux/linux.html#find","text":"find files with extension: find . -type f -name \"*.txt\"","title":"find"},{"location":"linux/linux.html#other-commands","text":"Certbot with nginx: sudo certbot --standalone certonly -d example.com --pre-hook \"service nginx stop\" --post-hook \"service nginx start\"","title":"other commands"},{"location":"linux/linux.html#tips","text":"print file strucuture: find . | sed -e \"s/[^-][^\\/]*\\// |/g\" -e \"s/|\\([^ ]\\)/| - \\1/\" check pid using port: lsof -i :8983 check open ports: netstat -plnt solve .pem files bad permission: chmod 400 mykey.pem convert file format with pandoc: pandoc -t <target_format> -f <original_format> <file> turn on case insensitive by adding the following line to /etc/inputrc : set completion-ignore-case on find and replace string: find . -type f ! -path \"./node_modules/{star}\" ! -path \"./.git/{star}\" -exec sed -i \"s/{underscore}{underscore}model/{underscore}model/g\" {} + indentify groff macro: grog -t <file> generate pdf example: groff -man -t <file> | pstopdf -i -o <file.pdf>","title":"tips"},{"location":"linux/linux.html#filesuser-management","text":"to enable sudo for user without asking for password, put at this line the end of file /etc/surdoers : username ALL=(ALL) NOPASSWD:ALL create group: groupadd <new_group> add user to group usermod -a -G <group_name> <username> list groups: cat /etc/group file persmission: # u for user, g for group, o for others # r for read, w for write, x for execute chmod ugo+rwx <foldername>","title":"files/user management"},{"location":"linux/linux.html#toubleshooting","text":"socat permission: setcap 'cap_net_bind_service=+ep' /usr/bin/socat","title":"toubleshooting"},{"location":"linux/linux.html#cronjobs","text":"check log: grep CRON /var/log/syslog","title":"cronjobs"},{"location":"linux/linux.html#misc","text":"http benchmark: ab -c 100 -n 10000 http://127.0.0.1:8080/api/","title":"misc"},{"location":"linux/tmux.html","text":"Tmux move-window: move-window -t <number> change default directory in a session: attach-session -t . -c <dir> attach to last session: tmux a attach to a specific session: tmux a -t <session> kill session: ctrl + B then press : and type kill-session kill window: ctrl + B - & copy: copy mode: ctrl + b , [ start copying: ctrl + space copy: ctrl + space or alt + space paste: ctrl + b, ] change default directory: ctrl + B : and attach -c desired/directory/path kill detached sessions: <~> $ tmux ls 0: 1 windows (created Sat Aug 17 00:03:56 2013) [80x23] 2: 1 windows (created Sat Aug 24 16:47:58 2013) [120x34] <~> $ tmux kill-session -t 2","title":"Tmux"},{"location":"linux/tmux.html#tmux","text":"move-window: move-window -t <number> change default directory in a session: attach-session -t . -c <dir> attach to last session: tmux a attach to a specific session: tmux a -t <session> kill session: ctrl + B then press : and type kill-session kill window: ctrl + B - & copy: copy mode: ctrl + b , [ start copying: ctrl + space copy: ctrl + space or alt + space paste: ctrl + b, ] change default directory: ctrl + B : and attach -c desired/directory/path kill detached sessions: <~> $ tmux ls 0: 1 windows (created Sat Aug 17 00:03:56 2013) [80x23] 2: 1 windows (created Sat Aug 24 16:47:58 2013) [120x34] <~> $ tmux kill-session -t 2","title":"Tmux"},{"location":"linux/vim.html","text":"Vim start recording: press q then any letter to define a register netrw :Explore : opens netrw in the current window :Sexplore : opens netrw in the horizontal split :Vexplore : opens netrw in a vertical split","title":"Vim"},{"location":"linux/vim.html#vim","text":"start recording: press q then any letter to define a register netrw :Explore : opens netrw in the current window :Sexplore : opens netrw in the horizontal split :Vexplore : opens netrw in a vertical split","title":"Vim"},{"location":"macos/macos.html","text":"macos install psycopg on m1: brew install libpq --build-from-source brew install openssl export LDFLAGS=\"-L/opt/homebrew/opt/openssl@1.1/lib -L/opt/homebrew/opt/libpq/lib\" export CPPFLAGS=\"-I/opt/homebrew/opt/openssl@1.1/include -I/opt/homebrew/opt/libpq/include\" pip3 install psycopg2","title":"macos"},{"location":"macos/macos.html#macos","text":"install psycopg on m1: brew install libpq --build-from-source brew install openssl export LDFLAGS=\"-L/opt/homebrew/opt/openssl@1.1/lib -L/opt/homebrew/opt/libpq/lib\" export CPPFLAGS=\"-I/opt/homebrew/opt/openssl@1.1/include -I/opt/homebrew/opt/libpq/include\" pip3 install psycopg2","title":"macos"},{"location":"misc/macos.html","text":"macos solve sudo touch id on tmux: https://github.com/fabianishere/pam_reattach","title":"macos"},{"location":"misc/macos.html#macos","text":"solve sudo touch id on tmux: https://github.com/fabianishere/pam_reattach","title":"macos"},{"location":"misc/misc.html","text":"Misc Semantica version (semver) examples: 2.0.0 2.0.0-rc.2 2.0.0-rc.1 1.0.0 1.0.0-beta Given a version number MAJOR.MINOR.PATCH, increment the: MAJOR version when you make incompatible API changes, MINOR version when you add functionality in a backwards compatible manner, and PATCH version when you make backwards compatible bug fixes. Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format. nodemon usage example: nodemon --exec \"go run main.go\" --signal SIGTERM -e go,html","title":"Misc"},{"location":"misc/misc.html#misc","text":"","title":"Misc"},{"location":"misc/misc.html#semantica-version-semver","text":"examples: 2.0.0 2.0.0-rc.2 2.0.0-rc.1 1.0.0 1.0.0-beta Given a version number MAJOR.MINOR.PATCH, increment the: MAJOR version when you make incompatible API changes, MINOR version when you add functionality in a backwards compatible manner, and PATCH version when you make backwards compatible bug fixes. Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format. nodemon usage example: nodemon --exec \"go run main.go\" --signal SIGTERM -e go,html","title":"Semantica version (semver)"},{"location":"programming_languages/flutter.html","text":"flutter run app on web: flutter run -d web-server --web-hostname=0.0.0.0 --web-port=8082 run app on macos: flutter run -d macos","title":"flutter"},{"location":"programming_languages/flutter.html#flutter","text":"run app on web: flutter run -d web-server --web-hostname=0.0.0.0 --web-port=8082 run app on macos: flutter run -d macos","title":"flutter"},{"location":"programming_languages/go.html","text":"Go easy way to compile and run on file changes: nodemon -e go --exec go run main.go --signal SIGTERM access private repositories: export GOPRIVATE=repo-name go cli create go module project: go mod init <name> add dependency to go.mod : go get <lib-name> clean go.mod file, add used dependncies, remove unused dependencies: go mod tidy download all dependencies from go.mod : go get ./... clean go cache: go clean -cache -modcache -i -r list library versions: go list -m -versions <lib-name> tips never use pointer semantics during construction, use value semantics instead: // bad p := &person{ name: \"bill\", } functionName(p) // good p := person{ name: \"bill\", } functionName(&p) for buillt-in types and reference types (map, slices, etc) use always values semantics cross compile to windows: GOOS=windows GOARCH=amd64 go build main.go","title":"Go"},{"location":"programming_languages/go.html#go","text":"easy way to compile and run on file changes: nodemon -e go --exec go run main.go --signal SIGTERM access private repositories: export GOPRIVATE=repo-name","title":"Go"},{"location":"programming_languages/go.html#go-cli","text":"create go module project: go mod init <name> add dependency to go.mod : go get <lib-name> clean go.mod file, add used dependncies, remove unused dependencies: go mod tidy download all dependencies from go.mod : go get ./... clean go cache: go clean -cache -modcache -i -r list library versions: go list -m -versions <lib-name>","title":"go cli"},{"location":"programming_languages/go.html#tips","text":"never use pointer semantics during construction, use value semantics instead: // bad p := &person{ name: \"bill\", } functionName(p) // good p := person{ name: \"bill\", } functionName(&p) for buillt-in types and reference types (map, slices, etc) use always values semantics cross compile to windows: GOOS=windows GOARCH=amd64 go build main.go","title":"tips"},{"location":"programming_languages/java.html","text":"java maven check dependency tree: mvn dependency:tree","title":"java"},{"location":"programming_languages/java.html#java","text":"","title":"java"},{"location":"programming_languages/java.html#maven","text":"check dependency tree: mvn dependency:tree","title":"maven"},{"location":"programming_languages/javascript.html","text":"javascript get attribute: element.getAttribute('attribute_name') date: new Date(\"2006-06-01\")","title":"javascript"},{"location":"programming_languages/javascript.html#javascript","text":"get attribute: element.getAttribute('attribute_name') date: new Date(\"2006-06-01\")","title":"javascript"},{"location":"programming_languages/php/laravel.html","text":"laravel create resource controller: php artisan make:controller --resource <ControllerName> create migration: php artisan make:migration <create_flights_table> create model: php artisan make:model <ModelName> --migration","title":"laravel"},{"location":"programming_languages/php/laravel.html#laravel","text":"create resource controller: php artisan make:controller --resource <ControllerName> create migration: php artisan make:migration <create_flights_table> create model: php artisan make:model <ModelName> --migration","title":"laravel"},{"location":"programming_languages/php/php.html","text":"PHP check ini file: php --ini regex: preg_match ( string $pattern , string $subject , array &$matches === null , int $flags === 0 , int $offset === 0 ) : int|false","title":"PHP"},{"location":"programming_languages/php/php.html#php","text":"check ini file: php --ini regex: preg_match ( string $pattern , string $subject , array &$matches === null , int $flags === 0 , int $offset === 0 ) : int|false","title":"PHP"},{"location":"programming_languages/python/django.html","text":"Django change password: python manage.py changepassword <username> start developer server: python manage.py runserver load data: python manage.py loaddata fixtures/fixture.json templates if statement: {% if obj %} test1 {% elif obj.value %} test2 {% else %} test3 {% endif %} deploy gunicorn command example: gunicorn arctel_django.wsgi --preload --workers=4 --timeout 300","title":"Django"},{"location":"programming_languages/python/django.html#django","text":"change password: python manage.py changepassword <username> start developer server: python manage.py runserver load data: python manage.py loaddata fixtures/fixture.json","title":"Django"},{"location":"programming_languages/python/django.html#templates","text":"if statement: {% if obj %} test1 {% elif obj.value %} test2 {% else %} test3 {% endif %}","title":"templates"},{"location":"programming_languages/python/django.html#deploy","text":"gunicorn command example: gunicorn arctel_django.wsgi --preload --workers=4 --timeout 300","title":"deploy"},{"location":"programming_languages/python/python.html","text":"python start http server: python3 -m http.server install requirements.txt: python3 -m pip install -r <path_to_requirements> uninstall packages: pip uninstall -r requirements.txt -y iPython: turn on module autoreload: %load_ext autoreload %autoreload 2 read csv: import csv with open('employee_birthday.txt') as csv_file: csv_reader = csv.reader(csv_file, delimiter=',') line_count = 0 for row in csv_reader: if line_count == 0: print(f'Column names are {\", \".join(row)}') line_count += 1 else: print(f'\\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.') line_count += 1 print(f'Processed {line_count} lines.') read file: with open('readme.txt') as f: lines = f.readlines()","title":"python"},{"location":"programming_languages/python/python.html#python","text":"start http server: python3 -m http.server install requirements.txt: python3 -m pip install -r <path_to_requirements> uninstall packages: pip uninstall -r requirements.txt -y iPython: turn on module autoreload: %load_ext autoreload %autoreload 2 read csv: import csv with open('employee_birthday.txt') as csv_file: csv_reader = csv.reader(csv_file, delimiter=',') line_count = 0 for row in csv_reader: if line_count == 0: print(f'Column names are {\", \".join(row)}') line_count += 1 else: print(f'\\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.') line_count += 1 print(f'Processed {line_count} lines.') read file: with open('readme.txt') as f: lines = f.readlines()","title":"python"},{"location":"virtualization/docker.html","text":"Docker add user to docker group so it does not ask for sudo: sudo usermod -aG docker $USER build image: docker build -t <image_name> . tag image: docker tag example_image:latest gauravvv/example_image:latest push image: docker push gauravvv/example_image:latest check docker disk space usage: docker system df","title":"Docker"},{"location":"virtualization/docker.html#docker","text":"add user to docker group so it does not ask for sudo: sudo usermod -aG docker $USER build image: docker build -t <image_name> . tag image: docker tag example_image:latest gauravvv/example_image:latest push image: docker push gauravvv/example_image:latest check docker disk space usage: docker system df","title":"Docker"},{"location":"virtualization/helm.html","text":"helm debug template: helm template ./path/to/template -f vars/values.yaml -f vars/values1.yaml --debug --dry-run","title":"helm"},{"location":"virtualization/helm.html#helm","text":"debug template: helm template ./path/to/template -f vars/values.yaml -f vars/values1.yaml --debug --dry-run","title":"helm"},{"location":"virtualization/k8s.html","text":"","title":"K8s"},{"location":"virtualization/kind.html","text":"kind","title":"kind"},{"location":"virtualization/kind.html#kind","text":"","title":"kind"},{"location":"virtualization/kubernetes.html","text":"kubernetes Run k8s locally with kind components api server etcd kubelet container runtime controller scheduler kubectl get current context: kubectl conffig current-context imperative command: kubectl apply ... declarative command: kubectl create ... configuration basic config required yaml fields (pod example): # example apiVersion: v1 kind: Pod metadata: name: myapp-pod labels: app: myapp spec: containers: - name: nginx-container image: nginx Replication Controller config example: apiVersion: v1 kind: ReplicationController metadata: name: myapp-rc spec: template: metadata: name: myapp-pod labels: app: myapp spec: containers: - name: nginx-container image: nginx replicas: 3 Replica Set config example: apiVersion: apps/v1 kind: ReplicaSet metadata: name: myapp-rc spec: template: metadata: name: myapp-pod labels: app: myapp spec: containers: - name: nginx-container image: nginx replicas: 3 selector: matchLabels: app: myapp","title":"kubernetes"},{"location":"virtualization/kubernetes.html#kubernetes","text":"Run k8s locally with kind","title":"kubernetes"},{"location":"virtualization/kubernetes.html#components","text":"api server etcd kubelet container runtime controller scheduler","title":"components"},{"location":"virtualization/kubernetes.html#kubectl","text":"get current context: kubectl conffig current-context imperative command: kubectl apply ... declarative command: kubectl create ...","title":"kubectl"},{"location":"virtualization/kubernetes.html#configuration","text":"","title":"configuration"},{"location":"virtualization/kubernetes.html#basic-config","text":"required yaml fields (pod example): # example apiVersion: v1 kind: Pod metadata: name: myapp-pod labels: app: myapp spec: containers: - name: nginx-container image: nginx Replication Controller config example: apiVersion: v1 kind: ReplicationController metadata: name: myapp-rc spec: template: metadata: name: myapp-pod labels: app: myapp spec: containers: - name: nginx-container image: nginx replicas: 3 Replica Set config example: apiVersion: apps/v1 kind: ReplicaSet metadata: name: myapp-rc spec: template: metadata: name: myapp-pod labels: app: myapp spec: containers: - name: nginx-container image: nginx replicas: 3 selector: matchLabels: app: myapp","title":"basic config"},{"location":"web/authentication.html","text":"Authentication Basic authentication uses http header Authorization with the keyword Basic the user and password are concatenated with : like this user:pass and then converted to base64 user:pass -> dXNlcjpwYXNz http header example: Authorization: Basic dXNlcjpwYXNz Bearer token uses http header Authorization with the keyword Bearer http example: Authorization: Bearer some_value JWT {JSON standard fields}.{Custom fields}.signature","title":"Authentication"},{"location":"web/authentication.html#authentication","text":"","title":"Authentication"},{"location":"web/authentication.html#basic-authentication","text":"uses http header Authorization with the keyword Basic the user and password are concatenated with : like this user:pass and then converted to base64 user:pass -> dXNlcjpwYXNz http header example: Authorization: Basic dXNlcjpwYXNz","title":"Basic authentication"},{"location":"web/authentication.html#bearer-token","text":"uses http header Authorization with the keyword Bearer http example: Authorization: Bearer some_value","title":"Bearer token"},{"location":"web/authentication.html#jwt","text":"{JSON standard fields}.{Custom fields}.signature","title":"JWT"},{"location":"web/web-standards.html","text":"web standards web header keys are case insensitive but its recommended to put them as lower case google json style guide reference: https://google.github.io/styleguide/jsoncstyleguide.xml object { string apiVersion?; string context?; string id?; string method?; object { string id? }* params?; object { string kind?; string fields?; string etag?; string id?; string lang?; string updated?; # date formatted RFC 3339 boolean deleted?; integer currentItemCount?; integer itemsPerPage?; integer startIndex?; integer totalItems?; integer pageIndex?; integer totalPages?; string pageLinkTemplate /^https?:/ ?; object {}* next?; string nextLink?; object {}* previous?; string previousLink?; object {}* self?; string selfLink?; object {}* edit?; string editLink?; array [ object {}*; ] items?; }* data?; object { integer code?; string message?; array [ object { string domain?; string reason?; string message?; string location?; string locationType?; string extendedHelp?; string sendReport?; }*; ] errors?; }* error?; }*; cloud event reference: https://github.com/cloudevents/spec/blob/v1.0.1/spec.md { \"specversion\" : \"1.0\", \"type\" : \"com.github.pull_request.opened\", \"source\" : \"https://github.com/cloudevents/spec/pull\", \"subject\" : \"123\", \"id\" : \"A234-1234-1234\", \"time\" : \"2018-04-05T17:31:00Z\", \"comexampleextension1\" : \"value\", \"comexampleothervalue\" : 5, \"datacontenttype\" : \"text/xml\", \"data\" : \"<much wow=\\\"xml\\\"/>\" }","title":"web standards"},{"location":"web/web-standards.html#web-standards","text":"","title":"web standards"},{"location":"web/web-standards.html#web","text":"header keys are case insensitive but its recommended to put them as lower case","title":"web"},{"location":"web/web-standards.html#google-json-style-guide","text":"reference: https://google.github.io/styleguide/jsoncstyleguide.xml object { string apiVersion?; string context?; string id?; string method?; object { string id? }* params?; object { string kind?; string fields?; string etag?; string id?; string lang?; string updated?; # date formatted RFC 3339 boolean deleted?; integer currentItemCount?; integer itemsPerPage?; integer startIndex?; integer totalItems?; integer pageIndex?; integer totalPages?; string pageLinkTemplate /^https?:/ ?; object {}* next?; string nextLink?; object {}* previous?; string previousLink?; object {}* self?; string selfLink?; object {}* edit?; string editLink?; array [ object {}*; ] items?; }* data?; object { integer code?; string message?; array [ object { string domain?; string reason?; string message?; string location?; string locationType?; string extendedHelp?; string sendReport?; }*; ] errors?; }* error?; }*;","title":"google json style guide"},{"location":"web/web-standards.html#cloud-event","text":"reference: https://github.com/cloudevents/spec/blob/v1.0.1/spec.md { \"specversion\" : \"1.0\", \"type\" : \"com.github.pull_request.opened\", \"source\" : \"https://github.com/cloudevents/spec/pull\", \"subject\" : \"123\", \"id\" : \"A234-1234-1234\", \"time\" : \"2018-04-05T17:31:00Z\", \"comexampleextension1\" : \"value\", \"comexampleothervalue\" : 5, \"datacontenttype\" : \"text/xml\", \"data\" : \"<much wow=\\\"xml\\\"/>\" }","title":"cloud event"}]}